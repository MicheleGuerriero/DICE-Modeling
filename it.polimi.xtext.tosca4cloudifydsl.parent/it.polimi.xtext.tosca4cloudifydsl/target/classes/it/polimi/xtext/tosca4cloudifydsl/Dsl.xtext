// automatically generated by Xtext
grammar it.polimi.xtext.tosca4cloudifydsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://tosca4cloudify/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Service_Template returns Service_Template:
// change type of Estring to STRING so xtext will generate "Double quotations" automatically	
	'{'
		('"tosca_definition_version" :' tosca_definition_version=STRING)?
		('\n, "description" :' description=STRING)?
		('\n, "imports" :' '[' serviceTemplate_hasImport+=Import ( "," serviceTemplate_hasImport+=Import)* ']' )?		
		('\n, "inputs" :' '{' interface_hasInput+=Input ( "," interface_hasInput+=Input)* '}' )?
		 '\n, "node_templates" :' '{' service_hasNodeTemplate+=Node_template ( "," service_hasNodeTemplate+=Node_template)* '}' 
		('\n, "outputs" :' '{' serviceTemplate_hasOutput+=Output ( "," serviceTemplate_hasOutput+=Output)* '}' )?
	'}';





Interface returns Interface:
	Interface_Impl | Source_interface | Target_interface;




Relationship returns Relationship:
	Relationship_Impl | Contained_in | Connected_to;






EString returns ecore::EString:
	STRING | ID;

Import returns Import:
	{Import}
	
	
		//(import_name=EString)?
		(file=STRING)?
		//('repository' repository=EString)?
		//('namespace_uri' namespace_uri=EString)?
		//('namespace_prefix' namespace_prefix=EString)?
	;

Output returns Output:
	{Output}
	'Output'
	parameter_name=EString
	'{'
		('type' type=EString)?
		('description' description=EString)?
		('value' value=EString)?
		('required' required=EString)?
		('default' default=EString)?
		('status' status=EString)?
	'}';

Input returns Input:
	{Input}
    parameter_name=EString
	'{'
		('type' type=STRING)?
		('description' description=STRING)?
		//('required' required=EString)?
		//(value=STRING)?
		('default' default=STRING)?
		//('status' status=EString)?
		
	'}'
	;
/*
Input returns Input:
	{Input}
	
	parameter_name=EString
	'{'
		('type' type=EString)?
		('description' description=EString)?
		('value' value=EString)?
		('required' required=EString)?
		('default' default=EString)?
		('status' status=EString)?
	'}';
*/
Node_template returns Node_template:
	{Node_template}
	node_template_name=STRING ':'
	'{'
		('"type" :' type=STRING)?
		(', \n "description" :' description=STRING)?
		(', \n "interfaces" :' '{' nodeTemplate_hasInterface+=Interface ( "," nodeTemplate_hasInterface+=Interface)* '}' )?
		(', \n "properties" :' '{' nodeTemplate_hasProperty+=Property ( "," nodeTemplate_hasProperty+=Property)* '}' )?
		(', \n "attributes" :' '{' nodeTemplate_hasAttribute+=Attribute ( "," nodeTemplate_hasAttribute+=Attribute)* '}' )?
		(', \n "requirements" :' '{' nodeTemplate_hasRequirement+=Requirement ( "," nodeTemplate_hasRequirement+=Requirement)* '}' )?
		(', \n "relationships" :' '[' NodeTemplate_hasRelationship+=Relationship ( "," NodeTemplate_hasRelationship+=Relationship)* ']' )?
	    (', \n "instances" :' nodeTemplate_hasInstances=instance)?
	'}';



Interface_Impl returns Interface:
   {Interface}
   interface_name=STRING ':'
	'{'		
		(hasOperation+=Operation ( "," hasOperation+=Operation)*)?
		//('interface_hasInput' '{' interface_hasInput+=Input ( "," interface_hasInput+=Input)* '}' )?
	'}';
	

	
	


Property returns Property:
	{Property}
	'Property'
	parameter_name=EString
	'{'
		('type' type=EString)?
		('description' description=EString)?
		('value' value=EString)?
		('required' required=EString)?
		('default' default=EString)?
		('status' status=EString)?
		('property_name' property_name=EString)?
	'}';

Attribute returns Attribute:
	{Attribute}
	'Attribute'
	parameter_name=EString
	'{'
		('type' type=EString)?
		('description' description=EString)?
		('value' value=EString)?
		('required' required=EString)?
		('default' default=EString)?
		('status' status=EString)?
	'}';

Requirement returns Requirement:
	{Requirement}
	'Requirement'
	'{'
		('requirement_name' requirement_name=EString)?
		('node' node=EString)?
		('capability_Type_name' capability_Type_name=EString)?
		('occurances' '{' occurances+=EString ( "," occurances+=EString)* '}' )?
	'}';

Relationship_Impl returns Relationship:
	{Relationship}
	'{'
		('"type" :' type=STRING)?
		(', \n "source" :' validSource=STRING)?
		(', \n "target" :' validTarget=STRING)?
		(', \n "source_interfaces" :' '{' relation_haSourceInterface+=Source_interface ( "," relation_haSourceInterface+=Source_interface)* '}' )?
		(', \n "target_interfaces" :' '{' relation_hasTargetInterface+=Target_interface ( "," relation_hasTargetInterface+=Target_interface)* '}' )?
	'}';
	
instance returns instance:
	{instance}
	'instance'
	parameter_name=EString
	'{'
		('type' type=EString)?
		('description' description=EString)?
		('value' value=EString)?
		('required' required=EString)?
		('default' default=EString)?
		('status' status=EString)?
	'}';

Operation returns Operation:
	{Operation}	
		(operation_name=STRING)? ':'
		//('description' description=EString)?
		(script=STRING)?
		//('executor' executor=EString)?
		//('operation_hasInput' '{' operation_hasInput+=Input ( "," operation_hasInput+=Input)* '}' )?
	;

Source_interface returns Source_interface:
	{Source_interface}
	interface_name=STRING ' :'
	'{'
		
		( hasOperation+=Operation ( "," hasOperation+=Operation)* )?
		//('interface_hasInput' '{' interface_hasInput+=Input ( "," interface_hasInput+=Input)* '}' )?
	'}';

Target_interface returns Target_interface:
	{Target_interface}	
	interface_name=STRING '  :'//**keep the spaces before ":" to avoid ambiguity!!**
	'{'
		('hasOperation' '{' hasOperation+=Operation ( "," hasOperation+=Operation)* '}' )?
		//('interface_hasInput' '{' interface_hasInput+=Input ( "," interface_hasInput+=Input)* '}' )?
	'}';





Contained_in returns Contained_in:
	{Contained_in}
	'Contained_in'
	'{'
		('type' type=EString)?
		('validSource' validSource=EString)?
		('validTarget' validTarget=EString)?
		('relation_haSourceInterface' '{' relation_haSourceInterface+=Source_interface ( "," relation_haSourceInterface+=Source_interface)* '}' )?
		('relation_hasTargetInterface' '{' relation_hasTargetInterface+=Target_interface ( "," relation_hasTargetInterface+=Target_interface)* '}' )?
	'}';

Connected_to returns Connected_to:
	{Connected_to}
	'Connected_to'
	'{'
		('type' type=EString)?
		('validSource' validSource=EString)?
		('validTarget' validTarget=EString)?
		('relation_haSourceInterface' '{' relation_haSourceInterface+=Source_interface ( "," relation_haSourceInterface+=Source_interface)* '}' )?
		('relation_hasTargetInterface' '{' relation_hasTargetInterface+=Target_interface ( "," relation_hasTargetInterface+=Target_interface)* '}' )?
	'}';